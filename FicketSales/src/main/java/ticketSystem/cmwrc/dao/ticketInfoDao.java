package ticketSystem.cmwrc.dao;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.sql.*;
import java.util.Calendar;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;




import org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

import com.mysql.jdbc.log.Log;

import ticketSystem.cmwrc.model.TicketDataModel;
import ticketSystem.cmwrc.model.TicketDetailsModel;
import ticketSystem.cmwrc.model.TicketRow;

public class ticketInfoDao {
	@Autowired
	private DataSource dataSource;
	  @Autowired 
	 private JdbcTemplate jdbcTemplate;
	  //private static final Logger logger = LoggerFactory.getLogger(ticketInfoDao.class);
	  @Autowired
	  private NamedParameterJdbcTemplate namedParamJdbcTemplate;
	//NEEDS MODIFICATIONS FOR PRODUCTION.
	
		 /**************************************************************************************************
		  * This method receives the Event Name and retrieves the eventId associated. Not being used right now
		  *
		  * @param  eventName          The Event Name being searched 
		  * @return None  
		  *************************************************************************************************/	
	 
	 public void findEventByName(String eventName){
		 //HardCoding for Testing
		 eventName = "'GeetRamayana2016'";
		 //JdbcTemplate jdbcTemplate =new JdbcTemplate(dataSource);
			String sqlGetEventByName = "SELECT eventIDNum from eventmaster where eventIDName = ";

		 sqlGetEventByName = sqlGetEventByName+eventName;
		 System.out.println("Query is "+sqlGetEventByName);
		 int id = jdbcTemplate.queryForInt(sqlGetEventByName);
		 System.out.println("Id is "+id);
		 }
	 
	 public void setDataSource(DataSource dataSource) {
		this.dataSource = dataSource;
	}
	 /**************************************************************************************************
	  * This method receives the Ticket Data and inserts into the TicketSalesMaster Table. 
	  *
	  * @param  tmodel          The data containing the details of the ticket purchase 
	  * @return shoppingCartId  An Autogenerated Id for the entry made into the TicketSalesMaster Table
	  *************************************************************************************************/
	public int addTicketData(TicketDataModel tmodel){
		 
		 
		 int EVENT_ID =1;
		 String updateTicketSalesMaster ="INSERT INTO ticketsalesmaster"+
				 						  "(firstName, lastName, addressLine1, addressLine2,city,state,zip,email,phone,eventId,paymentType,"+ "totalTicketAmount) VALUES "+
				 						  "(:firstName,:lastName,:addressL1,:addressL2,:city,:state,:zip,:email, :phone, :eventId, :pmtRadio, :totalPayment)";
		  SqlParameterSource fileParameters = new BeanPropertySqlParameterSource(tmodel);
		  KeyHolder keyHolder = new GeneratedKeyHolder();
		  namedParamJdbcTemplate.update(updateTicketSalesMaster, fileParameters, keyHolder);
		  return keyHolder.getKey().intValue();

		 
		 
	 }
	 /**************************************************************************************************
	  * This method receives the Ticket Purchase Data and calls a helper method to the TicketSalesDetails Table.
	  * for the input shoppingCartId supplied. 
	  *
	  * @param  shoppingCartId  The shoppingCartId of the purchase
	  * @param  tmodel  The data containing the details of the ticket purchase 
	  * @return      a list of TicketRow Model Objects
	  *************************************************************************************************/
	public void addTicketDetailsData(TicketDataModel tmodel, Integer shoppingCartId){
		
		String SAT_FRONT_SEC="Saturday Front Section";
		String SUN_FRONT_SEC="Sunday Front Section";
		String BOTH_DAY_FRONT_SEC="Both Days Front Section";
		String SAT_BACK_SEC ="Saturday  Rear Section";
		String SUN_BACK_SEC ="Sunday Rear Section";
		String BOTH_DAY_BACK_SEC ="Both Days Rear Section";
		
		 String ticketCode;
		 /************************************************************************************************
		  * For Every row of Ticket possible, check whether or not an Adult/Child/Youth Ticket was purchased
		  * and insert it into the TicketDetails Table
		  ************************************************************************************************/
		
		if(tmodel.getAdultSatFrontDropDown()>0||tmodel.getChildSatFrontDropDown()>0||tmodel.getYouthSatFrontDropDown()>0){
			ticketCode= SAT_FRONT_SEC;
			TicketDetailsModel tdetailsModel = new TicketDetailsModel(ticketCode,tmodel.getAdultSatFrontDropDown(),tmodel.getChildSatFrontDropDown(),tmodel.getYouthSatFrontDropDown());
			addTicketDetailsRow(tdetailsModel,shoppingCartId);
		}
		
		if(tmodel.getAdultSunFrontDropDown()>0||tmodel.getChildSunFrontDropDown()>0||tmodel.getYouthSunFrontDropDown()>0){
			ticketCode= SUN_FRONT_SEC;
			TicketDetailsModel tdetailsModel = new TicketDetailsModel(ticketCode,tmodel.getAdultSunFrontDropDown(),tmodel.getChildSunFrontDropDown(),tmodel.getYouthSunFrontDropDown());
			addTicketDetailsRow(tdetailsModel,shoppingCartId);
		}
		
		if(tmodel.getAdultBothFrontDropDown()>0||tmodel.getChildBothFrontDropDown()>0||tmodel.getYouthBothFrontDropDown()>0){
			ticketCode= BOTH_DAY_FRONT_SEC;
			TicketDetailsModel tdetailsModel = new TicketDetailsModel(ticketCode,tmodel.getAdultBothFrontDropDown(),tmodel.getChildBothFrontDropDown(),tmodel.getYouthBothFrontDropDown());
			addTicketDetailsRow(tdetailsModel,shoppingCartId);
		}
		if(tmodel.getAdultSatBackDropDown()>0||tmodel.getChildSatBackDropDown()>0||tmodel.getYouthSatBackDropDown()>0){
			ticketCode= SAT_BACK_SEC;
			TicketDetailsModel tdetailsModel = new TicketDetailsModel(ticketCode,tmodel.getAdultSatBackDropDown(),tmodel.getChildSatBackDropDown(),tmodel.getYouthSatBackDropDown());
			addTicketDetailsRow(tdetailsModel,shoppingCartId);
		}
		
		if(tmodel.getAdultSunBackDropDown()>0||tmodel.getChildSunBackDropDown()>0||tmodel.getYouthSunBackDropDown()>0){
			ticketCode= SUN_BACK_SEC;
			TicketDetailsModel tdetailsModel = new TicketDetailsModel(ticketCode,tmodel.getAdultSunBackDropDown(),tmodel.getChildSunBackDropDown(),tmodel.getYouthSunBackDropDown());
			addTicketDetailsRow(tdetailsModel,shoppingCartId);
		}
		
		
		if(tmodel.getAdultBothBackDropDown()>0||tmodel.getChildBothBackDropDown()>0||tmodel.getYouthBothBackDropDown()>0){
			ticketCode= BOTH_DAY_BACK_SEC;
			TicketDetailsModel tdetailsModel = new TicketDetailsModel(ticketCode,tmodel.getAdultBothBackDropDown(),tmodel.getChildBothBackDropDown(),tmodel.getYouthBothBackDropDown());
			addTicketDetailsRow(tdetailsModel,shoppingCartId);
		}
		
		 /**************************************************************************************************
		  * This method updates the TicketDetails Table with the data provided 
		  * for the shoppingCartId supplied. 
		  *
		  * @param  tdetailsModel  A Model Object Holding the entire details of the purchase made.
		  * @return     None
		  *************************************************************************************************/
	}
	
	public void addTicketDetailsRow(TicketDetailsModel tdetailsModel,Integer shoppingCartId){
		
		String sqlInsertTicketDetails ="INSERT INTO ticketsalesdetails (shoppingCartId, ticketCode, adultTicketCount, childTicketCount, youthTicketCount)VALUES"
				+ "(?,?,?,?,?)";
		Object[] params = new Object[] { shoppingCartId, tdetailsModel.getTicketCode(), tdetailsModel.getAdultTicketCount(), tdetailsModel.getChildTicketCount(),tdetailsModel.getYouthTicketCount() };
		int[] types = new int[] { Types.INTEGER, Types.VARCHAR, Types.INTEGER, Types.INTEGER,Types.INTEGER };
		int row = jdbcTemplate.update(sqlInsertTicketDetails, params, types);
		System.out.println(row + " row inserted in ticketDetails.");

	}
	 /**************************************************************************************************
	  * This returns a list of TicketRow Model Object 
	  * for the input eventId supplied. 
	  *
	  * @param  eventId  The eventId of the current Event
	  * @return      a list of TicketRow Model Objects
	  *************************************************************************************************/
	 public List<TicketRow> getTicketRows(int eventId){
		 List<TicketRow> ticketRows = new ArrayList<TicketRow>();;
		//HardCoding for Testing
		 eventId=1;
		 String eventName ="GeetRamayana2016";
		 long extraDaysInMsPerDay = 1000*60*60*24;
		 long numExtraDays =62;
		 String sqlGetTicketRows ="SELECT ticketCode, ticketDescription, adultTicketPrice, childTicketPrice,youthTicketPrice FROM ticketoptions WHERE ? BETWEEN effectiveStart AND effectiveEnd";
		 //CHANGE THIS IN DEPLOYED CODE
		 long extraDaysMs = Calendar.getInstance().getTime().getTime();//+numExtraDays*extraDaysInMsPerDay;

		 java.sql.Date date = new java.sql.Date(extraDaysMs);
		 System.out.println(date);


	      List<Map<String, Object>> rows = jdbcTemplate.queryForList(sqlGetTicketRows,date);
	      System.out.println("Rows Size "+rows.size());
	      for (Map row:rows){
	    	  TicketRow ticketRow = new TicketRow();
	    	  ticketRow.setEventName(eventName);
	    	  ticketRow.setTicketCode((String)row.get("ticketCode"));
	    	  ticketRow.setTicketDescription((String)row.get("ticketDescription"));
	    	  ticketRow.setAdultTicketPrice(Integer.parseInt(String.valueOf(row.get("adultTicketPrice"))));
	    	  ticketRow.setChildTicketPrice(Integer.parseInt(String.valueOf(row.get("childTicketPrice"))));
	    	  ticketRow.setYouthTicketPrice(Integer.parseInt(String.valueOf(row.get("youthTicketPrice"))));
	    	  if(ticketRow!=null){	    	  ticketRows.add(ticketRow);
}
	    	  System.out.println("Adult Ticket Price: "+ String.valueOf(row.get("adultTicketPrice")));
	      }
	        

		 
		 
		 return ticketRows;
		 
	 }

}
